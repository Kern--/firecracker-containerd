// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.12.4
// source: types.proto

package proto

import (
	any1 "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message to store bundle/config.json bytes
type ExtraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonSpec    []byte    `protobuf:"bytes,1,opt,name=JsonSpec,proto3" json:"JsonSpec,omitempty"`
	RuncOptions *any1.Any `protobuf:"bytes,2,opt,name=RuncOptions,proto3" json:"RuncOptions,omitempty"`
	StdinPort   uint32    `protobuf:"varint,3,opt,name=StdinPort,proto3" json:"StdinPort,omitempty"`
	StdoutPort  uint32    `protobuf:"varint,4,opt,name=StdoutPort,proto3" json:"StdoutPort,omitempty"`
	StderrPort  uint32    `protobuf:"varint,5,opt,name=StderrPort,proto3" json:"StderrPort,omitempty"`
}

func (x *ExtraData) Reset() {
	*x = ExtraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraData) ProtoMessage() {}

func (x *ExtraData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraData.ProtoReflect.Descriptor instead.
func (*ExtraData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *ExtraData) GetJsonSpec() []byte {
	if x != nil {
		return x.JsonSpec
	}
	return nil
}

func (x *ExtraData) GetRuncOptions() *any1.Any {
	if x != nil {
		return x.RuncOptions
	}
	return nil
}

func (x *ExtraData) GetStdinPort() uint32 {
	if x != nil {
		return x.StdinPort
	}
	return 0
}

func (x *ExtraData) GetStdoutPort() uint32 {
	if x != nil {
		return x.StdoutPort
	}
	return 0
}

func (x *ExtraData) GetStderrPort() uint32 {
	if x != nil {
		return x.StderrPort
	}
	return 0
}

// Message to specify network config for a Firecracker VM
type FirecrackerNetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowMMDS      bool                    `protobuf:"varint,1,opt,name=AllowMMDS,proto3" json:"AllowMMDS,omitempty"`          // Specifies if metadata service should be available on this network interface
	InRateLimiter  *FirecrackerRateLimiter `protobuf:"bytes,2,opt,name=InRateLimiter,proto3" json:"InRateLimiter,omitempty"`   // Specifies a rate limiter for incoming bytes
	OutRateLimiter *FirecrackerRateLimiter `protobuf:"bytes,3,opt,name=OutRateLimiter,proto3" json:"OutRateLimiter,omitempty"` // Specifies a rate limiter for outgoing bytes
	// CNIConfiguration specifies CNI configuration that will be used to generate
	// a network interface for a Firecracker VM.
	CNIConfig *CNIConfiguration `protobuf:"bytes,4,opt,name=CNIConfig,proto3" json:"CNIConfig,omitempty"`
	// StaticNetworkConfiguration specifies static configuration parameters for a
	// Firecracker VM's network interface
	StaticConfig *StaticNetworkConfiguration `protobuf:"bytes,5,opt,name=StaticConfig,proto3" json:"StaticConfig,omitempty"`
}

func (x *FirecrackerNetworkInterface) Reset() {
	*x = FirecrackerNetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerNetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerNetworkInterface) ProtoMessage() {}

func (x *FirecrackerNetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerNetworkInterface.ProtoReflect.Descriptor instead.
func (*FirecrackerNetworkInterface) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *FirecrackerNetworkInterface) GetAllowMMDS() bool {
	if x != nil {
		return x.AllowMMDS
	}
	return false
}

func (x *FirecrackerNetworkInterface) GetInRateLimiter() *FirecrackerRateLimiter {
	if x != nil {
		return x.InRateLimiter
	}
	return nil
}

func (x *FirecrackerNetworkInterface) GetOutRateLimiter() *FirecrackerRateLimiter {
	if x != nil {
		return x.OutRateLimiter
	}
	return nil
}

func (x *FirecrackerNetworkInterface) GetCNIConfig() *CNIConfiguration {
	if x != nil {
		return x.CNIConfig
	}
	return nil
}

func (x *FirecrackerNetworkInterface) GetStaticConfig() *StaticNetworkConfiguration {
	if x != nil {
		return x.StaticConfig
	}
	return nil
}

// Message to specify CNI configuration that will be used to
// generate a network interface for a Firecracker VM
type CNIConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NetworkName is the name of a CNI network (as found in CNI
	// configuration files) that will be used to generate the
	// network interface.
	NetworkName string `protobuf:"bytes,1,opt,name=NetworkName,proto3" json:"NetworkName,omitempty"`
	// InterfaceName corresponds to the CNI_IFNAME parameter that will be
	// provided to CNI plugins during invocation.
	InterfaceName string `protobuf:"bytes,2,opt,name=InterfaceName,proto3" json:"InterfaceName,omitempty"`
	// BinPath is a list of directories that will be searched when
	// looking for CNI plugin binaries. Defaults to just "/opt/cni/bin"
	BinPath []string `protobuf:"bytes,3,rep,name=BinPath,proto3" json:"BinPath,omitempty"`
	// ConfDir is the directory in which CNI configuration will be sought.
	// If not specified, will default to "/etc/cni/conf.d".
	ConfDir string `protobuf:"bytes,4,opt,name=ConfDir,proto3" json:"ConfDir,omitempty"`
	// CacheDir is the directory in which CNI results will be temporarily
	// cached by the runtime. If not specified, it will default to
	// "/var/lib/cni"
	CacheDir string `protobuf:"bytes,5,opt,name=CacheDir,proto3" json:"CacheDir,omitempty"`
	// Args corresponds to the CNI_ARGS parameter that will be provided to
	// CNI plugins on invocation.
	Args []*CNIConfiguration_CNIArg `protobuf:"bytes,6,rep,name=Args,proto3" json:"Args,omitempty"`
}

func (x *CNIConfiguration) Reset() {
	*x = CNIConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIConfiguration) ProtoMessage() {}

func (x *CNIConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIConfiguration.ProtoReflect.Descriptor instead.
func (*CNIConfiguration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *CNIConfiguration) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *CNIConfiguration) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *CNIConfiguration) GetBinPath() []string {
	if x != nil {
		return x.BinPath
	}
	return nil
}

func (x *CNIConfiguration) GetConfDir() string {
	if x != nil {
		return x.ConfDir
	}
	return ""
}

func (x *CNIConfiguration) GetCacheDir() string {
	if x != nil {
		return x.CacheDir
	}
	return ""
}

func (x *CNIConfiguration) GetArgs() []*CNIConfiguration_CNIArg {
	if x != nil {
		return x.Args
	}
	return nil
}

// Message to specify static configuration parameters for a
// Firecracker VM's network interface
type StaticNetworkConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress  string `protobuf:"bytes,1,opt,name=MacAddress,proto3" json:"MacAddress,omitempty"`   // Specifies the mac address for the the device
	HostDevName string `protobuf:"bytes,2,opt,name=HostDevName,proto3" json:"HostDevName,omitempty"` // Specifies the name of the tap device on the host
	// IPConfig optionally provides static IP configuration that will be configured
	// on the VM's internal networking interface. If not specified, no IP
	// configuration will be applied to the VM's internal nic automatically.
	IPConfig *IPConfiguration `protobuf:"bytes,3,opt,name=IPConfig,proto3" json:"IPConfig,omitempty"`
}

func (x *StaticNetworkConfiguration) Reset() {
	*x = StaticNetworkConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticNetworkConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNetworkConfiguration) ProtoMessage() {}

func (x *StaticNetworkConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNetworkConfiguration.ProtoReflect.Descriptor instead.
func (*StaticNetworkConfiguration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *StaticNetworkConfiguration) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *StaticNetworkConfiguration) GetHostDevName() string {
	if x != nil {
		return x.HostDevName
	}
	return ""
}

func (x *StaticNetworkConfiguration) GetIPConfig() *IPConfiguration {
	if x != nil {
		return x.IPConfig
	}
	return nil
}

// Message to specify static IP configuration that will be
// applied to a Firecracker VM's network interface internally
type IPConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PrimaryAddr specifies, in CIDR notation, the primary address
	// and subnet that a network interface will be assigned inside
	// the VM.
	PrimaryAddr string `protobuf:"bytes,1,opt,name=PrimaryAddr,proto3" json:"PrimaryAddr,omitempty"`
	// GatewayAddr specifies the default gateway that a network interface
	// should use inside the VM.
	GatewayAddr string `protobuf:"bytes,3,opt,name=GatewayAddr,proto3" json:"GatewayAddr,omitempty"`
	// Nameservers is a list of nameservers that the VM will be configured
	// to use internally. Currently only up to 2 nameservers can be specified
	// (any more in the list will be ignored) and configuration is provided
	// to the VM via /proc/net/pnp.
	Nameservers []string `protobuf:"bytes,4,rep,name=Nameservers,proto3" json:"Nameservers,omitempty"`
}

func (x *IPConfiguration) Reset() {
	*x = IPConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPConfiguration) ProtoMessage() {}

func (x *IPConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPConfiguration.ProtoReflect.Descriptor instead.
func (*IPConfiguration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *IPConfiguration) GetPrimaryAddr() string {
	if x != nil {
		return x.PrimaryAddr
	}
	return ""
}

func (x *IPConfiguration) GetGatewayAddr() string {
	if x != nil {
		return x.GatewayAddr
	}
	return ""
}

func (x *IPConfiguration) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

// Message to set the machine config for a Firecracker VM
type FirecrackerMachineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CPUTemplate string `protobuf:"bytes,1,opt,name=CPUTemplate,proto3" json:"CPUTemplate,omitempty"` // Specifies the cpu template. Example: "T2" or "C3"
	HtEnabled   bool   `protobuf:"varint,2,opt,name=HtEnabled,proto3" json:"HtEnabled,omitempty"`    // Specifies if hyper-threading should be enabled
	// Specifies the memory size of VM
	// This lets us create a Firecracker VM of up to 4096 TiB, which
	// for a microVM should be large enough
	MemSizeMib uint32 `protobuf:"varint,3,opt,name=MemSizeMib,proto3" json:"MemSizeMib,omitempty"`
	VcpuCount  uint32 `protobuf:"varint,4,opt,name=VcpuCount,proto3" json:"VcpuCount,omitempty"` // Specifies the number of vCPUs for the VM
}

func (x *FirecrackerMachineConfiguration) Reset() {
	*x = FirecrackerMachineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerMachineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerMachineConfiguration) ProtoMessage() {}

func (x *FirecrackerMachineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerMachineConfiguration.ProtoReflect.Descriptor instead.
func (*FirecrackerMachineConfiguration) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *FirecrackerMachineConfiguration) GetCPUTemplate() string {
	if x != nil {
		return x.CPUTemplate
	}
	return ""
}

func (x *FirecrackerMachineConfiguration) GetHtEnabled() bool {
	if x != nil {
		return x.HtEnabled
	}
	return false
}

func (x *FirecrackerMachineConfiguration) GetMemSizeMib() uint32 {
	if x != nil {
		return x.MemSizeMib
	}
	return 0
}

func (x *FirecrackerMachineConfiguration) GetVcpuCount() uint32 {
	if x != nil {
		return x.VcpuCount
	}
	return 0
}

// Message to specify the block device config for a Firecracker VM
type FirecrackerRootDrive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) HostPath is the path on the host to the filesystem image or device
	// that will supply the rootfs of the VM.
	HostPath string `protobuf:"bytes,1,opt,name=HostPath,proto3" json:"HostPath,omitempty"`
	// (Optional) If the HostPath points to a drive or image with multiple
	// partitions, Partuuid specifies which partition will be used to boot
	// the VM
	Partuuid string `protobuf:"bytes,2,opt,name=Partuuid,proto3" json:"Partuuid,omitempty"`
	// (Optional) If set to true, IsWritable results in the VM Guest's rootfs
	// being mounted as read-write. Defaults to false, in which case the
	// rootfs is mounted as read-only.
	IsWritable bool `protobuf:"varint,3,opt,name=IsWritable,proto3" json:"IsWritable,omitempty"`
	// (Optional) RateLimiter configuration that will be applied to the
	// backing-drive for the VM's rootfs
	RateLimiter *FirecrackerRateLimiter `protobuf:"bytes,4,opt,name=RateLimiter,proto3" json:"RateLimiter,omitempty"`
	// (Optional) CacheType specifies the caching strategy for the block device.
	// The supported caching strategies are: "Unsafe"(default) and "Writeback".
	CacheType string `protobuf:"bytes,5,opt,name=CacheType,proto3" json:"CacheType,omitempty"`
}

func (x *FirecrackerRootDrive) Reset() {
	*x = FirecrackerRootDrive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerRootDrive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerRootDrive) ProtoMessage() {}

func (x *FirecrackerRootDrive) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerRootDrive.ProtoReflect.Descriptor instead.
func (*FirecrackerRootDrive) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *FirecrackerRootDrive) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *FirecrackerRootDrive) GetPartuuid() string {
	if x != nil {
		return x.Partuuid
	}
	return ""
}

func (x *FirecrackerRootDrive) GetIsWritable() bool {
	if x != nil {
		return x.IsWritable
	}
	return false
}

func (x *FirecrackerRootDrive) GetRateLimiter() *FirecrackerRateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

func (x *FirecrackerRootDrive) GetCacheType() string {
	if x != nil {
		return x.CacheType
	}
	return ""
}

type FirecrackerDriveMount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) HostPath is the path on the host to the filesystem image or device
	// that will be mounted inside the VM.
	HostPath string `protobuf:"bytes,1,opt,name=HostPath,proto3" json:"HostPath,omitempty"`
	// (Required) VMPath is the path inside the VM guest at which the filesystem
	// image or device will be mounted.
	VMPath string `protobuf:"bytes,2,opt,name=VMPath,proto3" json:"VMPath,omitempty"`
	// (Required) FilesystemType is the filesystem type (i.e. ext4, xfs, etc.), as
	// used when mounting the filesystem image inside the VM. The VM guest kernel
	// is expected to have support for this filesystem.
	FilesystemType string `protobuf:"bytes,3,opt,name=FilesystemType,proto3" json:"FilesystemType,omitempty"`
	// (Optional) Options are fstab-style options that the mount will be performed
	// within the VM (i.e. ["rw", "noatime"]). Defaults to none if not specified.
	Options []string `protobuf:"bytes,4,rep,name=Options,proto3" json:"Options,omitempty"`
	// (Optional) RateLimiter configuration that will be applied to the
	// backing-drive for the VM's rootfs
	RateLimiter *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=RateLimiter,proto3" json:"RateLimiter,omitempty"`
	// (Optional) If set to true, IsWritable results in the backing file for the
	// drive being opened as read-write by the Firecracker VMM on the host, allowing
	// writes to the image from within the guest. Defaults to false, in which case
	// the block device in the VM will be read-only.
	IsWritable bool `protobuf:"varint,6,opt,name=IsWritable,proto3" json:"IsWritable,omitempty"`
	// (Optional) CacheType specifies the caching strategy for the block device.
	// The supported caching strategies are: "Unsafe"(default) and "Writeback".
	CacheType string `protobuf:"bytes,7,opt,name=CacheType,proto3" json:"CacheType,omitempty"`
}

func (x *FirecrackerDriveMount) Reset() {
	*x = FirecrackerDriveMount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerDriveMount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerDriveMount) ProtoMessage() {}

func (x *FirecrackerDriveMount) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerDriveMount.ProtoReflect.Descriptor instead.
func (*FirecrackerDriveMount) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *FirecrackerDriveMount) GetHostPath() string {
	if x != nil {
		return x.HostPath
	}
	return ""
}

func (x *FirecrackerDriveMount) GetVMPath() string {
	if x != nil {
		return x.VMPath
	}
	return ""
}

func (x *FirecrackerDriveMount) GetFilesystemType() string {
	if x != nil {
		return x.FilesystemType
	}
	return ""
}

func (x *FirecrackerDriveMount) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *FirecrackerDriveMount) GetRateLimiter() *FirecrackerRateLimiter {
	if x != nil {
		return x.RateLimiter
	}
	return nil
}

func (x *FirecrackerDriveMount) GetIsWritable() bool {
	if x != nil {
		return x.IsWritable
	}
	return false
}

func (x *FirecrackerDriveMount) GetCacheType() string {
	if x != nil {
		return x.CacheType
	}
	return ""
}

// Message to specify an IO rate limiter with bytes/s and ops/s limits
type FirecrackerRateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bandwidth *FirecrackerTokenBucket `protobuf:"bytes,1,opt,name=Bandwidth,proto3" json:"Bandwidth,omitempty"` // Specifies a token bucket with bytes as tokens
	Ops       *FirecrackerTokenBucket `protobuf:"bytes,2,opt,name=Ops,proto3" json:"Ops,omitempty"`             // Specifies a token bucket with operations as tokens
}

func (x *FirecrackerRateLimiter) Reset() {
	*x = FirecrackerRateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerRateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerRateLimiter) ProtoMessage() {}

func (x *FirecrackerRateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerRateLimiter.ProtoReflect.Descriptor instead.
func (*FirecrackerRateLimiter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *FirecrackerRateLimiter) GetBandwidth() *FirecrackerTokenBucket {
	if x != nil {
		return x.Bandwidth
	}
	return nil
}

func (x *FirecrackerRateLimiter) GetOps() *FirecrackerTokenBucket {
	if x != nil {
		return x.Ops
	}
	return nil
}

// Message to specify a token buicket used to rate limit disk and network IO for a Firecracker VM
type FirecrackerTokenBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneTimeBurst int64 `protobuf:"varint,1,opt,name=OneTimeBurst,proto3" json:"OneTimeBurst,omitempty"` // Specifies the initial size of the token bucket
	RefillTime   int64 `protobuf:"varint,2,opt,name=RefillTime,proto3" json:"RefillTime,omitempty"`     // Specifies the amount of millis it takes for the bucket to fill
	Capacity     int64 `protobuf:"varint,3,opt,name=Capacity,proto3" json:"Capacity,omitempty"`         // Specifies the number of tokens this bucket can hold
}

func (x *FirecrackerTokenBucket) Reset() {
	*x = FirecrackerTokenBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerTokenBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerTokenBucket) ProtoMessage() {}

func (x *FirecrackerTokenBucket) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerTokenBucket.ProtoReflect.Descriptor instead.
func (*FirecrackerTokenBucket) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *FirecrackerTokenBucket) GetOneTimeBurst() int64 {
	if x != nil {
		return x.OneTimeBurst
	}
	return 0
}

func (x *FirecrackerTokenBucket) GetRefillTime() int64 {
	if x != nil {
		return x.RefillTime
	}
	return 0
}

func (x *FirecrackerTokenBucket) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

type FirecrackerBalloonDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AmountMib             int64 `protobuf:"varint,1,opt,name=AmountMib,proto3" json:"AmountMib,omitempty"`                         //Target balloon size in MiB.
	DeflateOnOom          bool  `protobuf:"varint,2,opt,name=DeflateOnOom,proto3" json:"DeflateOnOom,omitempty"`                   // Whether the balloon should deflate when the guest has memory pressure.
	StatsPollingIntervals int64 `protobuf:"varint,3,opt,name=StatsPollingIntervals,proto3" json:"StatsPollingIntervals,omitempty"` // Interval in seconds between refreshing statistics.
}

func (x *FirecrackerBalloonDevice) Reset() {
	*x = FirecrackerBalloonDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirecrackerBalloonDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirecrackerBalloonDevice) ProtoMessage() {}

func (x *FirecrackerBalloonDevice) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirecrackerBalloonDevice.ProtoReflect.Descriptor instead.
func (*FirecrackerBalloonDevice) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *FirecrackerBalloonDevice) GetAmountMib() int64 {
	if x != nil {
		return x.AmountMib
	}
	return 0
}

func (x *FirecrackerBalloonDevice) GetDeflateOnOom() bool {
	if x != nil {
		return x.DeflateOnOom
	}
	return false
}

func (x *FirecrackerBalloonDevice) GetStatsPollingIntervals() int64 {
	if x != nil {
		return x.StatsPollingIntervals
	}
	return 0
}

type CNIConfiguration_CNIArg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CNIConfiguration_CNIArg) Reset() {
	*x = CNIConfiguration_CNIArg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CNIConfiguration_CNIArg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CNIConfiguration_CNIArg) ProtoMessage() {}

func (x *CNIConfiguration_CNIArg) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CNIConfiguration_CNIArg.ProtoReflect.Descriptor instead.
func (*CNIConfiguration_CNIArg) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CNIConfiguration_CNIArg) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CNIConfiguration_CNIArg) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x36, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x52,
	0x75, 0x6e, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x64, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53,
	0x74, 0x64, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x74,
	0x64, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x74,
	0x64, 0x65, 0x72, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xad, 0x02, 0x0a, 0x1b, 0x46, 0x69, 0x72,
	0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4d, 0x4d, 0x44, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x4d, 0x44, 0x53, 0x12, 0x3d, 0x0a, 0x0d, 0x49, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x49, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0e, 0x4f, 0x75, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x43, 0x4e, 0x49, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x43, 0x4e, 0x49, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x4e,
	0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8a, 0x02, 0x0a, 0x10, 0x43, 0x4e, 0x49,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x42, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x44, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x44, 0x69, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x4e, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x4e, 0x49, 0x41, 0x72, 0x67, 0x52, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x30, 0x0a, 0x06, 0x43, 0x4e, 0x49, 0x41, 0x72, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x76, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x49, 0x50, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x77, 0x0a, 0x0f, 0x49, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x9f, 0x01,
	0x0a, 0x1f, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x50, 0x55, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x48, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x69, 0x62, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x65, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x69,
	0x62, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xc7, 0x01, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52,
	0x6f, 0x6f, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x74, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63,
	0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x46, 0x69,
	0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x44, 0x72, 0x69, 0x76, 0x65, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x56, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x56, 0x4d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0b, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x57, 0x72, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x57, 0x72, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x7a, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x09,
	0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x09, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x03, 0x4f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x03, 0x4f, 0x70, 0x73, 0x22, 0x78,
	0x0a, 0x16, 0x46, 0x69, 0x72, 0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x52, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x72,
	0x65, 0x63, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x42, 0x61, 0x6c, 0x6c, 0x6f, 0x6f, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x69, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x69, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x4f, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x6c, 0x61,
	0x74, 0x65, 0x4f, 0x6e, 0x4f, 0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_types_proto_goTypes = []interface{}{
	(*ExtraData)(nil),                       // 0: ExtraData
	(*FirecrackerNetworkInterface)(nil),     // 1: FirecrackerNetworkInterface
	(*CNIConfiguration)(nil),                // 2: CNIConfiguration
	(*StaticNetworkConfiguration)(nil),      // 3: StaticNetworkConfiguration
	(*IPConfiguration)(nil),                 // 4: IPConfiguration
	(*FirecrackerMachineConfiguration)(nil), // 5: FirecrackerMachineConfiguration
	(*FirecrackerRootDrive)(nil),            // 6: FirecrackerRootDrive
	(*FirecrackerDriveMount)(nil),           // 7: FirecrackerDriveMount
	(*FirecrackerRateLimiter)(nil),          // 8: FirecrackerRateLimiter
	(*FirecrackerTokenBucket)(nil),          // 9: FirecrackerTokenBucket
	(*FirecrackerBalloonDevice)(nil),        // 10: FirecrackerBalloonDevice
	(*CNIConfiguration_CNIArg)(nil),         // 11: CNIConfiguration.CNIArg
	(*any1.Any)(nil),                        // 12: google.protobuf.Any
}
var file_types_proto_depIdxs = []int32{
	12, // 0: ExtraData.RuncOptions:type_name -> google.protobuf.Any
	8,  // 1: FirecrackerNetworkInterface.InRateLimiter:type_name -> FirecrackerRateLimiter
	8,  // 2: FirecrackerNetworkInterface.OutRateLimiter:type_name -> FirecrackerRateLimiter
	2,  // 3: FirecrackerNetworkInterface.CNIConfig:type_name -> CNIConfiguration
	3,  // 4: FirecrackerNetworkInterface.StaticConfig:type_name -> StaticNetworkConfiguration
	11, // 5: CNIConfiguration.Args:type_name -> CNIConfiguration.CNIArg
	4,  // 6: StaticNetworkConfiguration.IPConfig:type_name -> IPConfiguration
	8,  // 7: FirecrackerRootDrive.RateLimiter:type_name -> FirecrackerRateLimiter
	8,  // 8: FirecrackerDriveMount.RateLimiter:type_name -> FirecrackerRateLimiter
	9,  // 9: FirecrackerRateLimiter.Bandwidth:type_name -> FirecrackerTokenBucket
	9,  // 10: FirecrackerRateLimiter.Ops:type_name -> FirecrackerTokenBucket
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerNetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticNetworkConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerMachineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerRootDrive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerDriveMount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerRateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerTokenBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirecrackerBalloonDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CNIConfiguration_CNIArg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
