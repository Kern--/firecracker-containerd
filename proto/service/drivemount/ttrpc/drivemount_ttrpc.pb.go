// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: drivemount.proto
package drivemount

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
	empty "github.com/golang/protobuf/ptypes/empty"
)

type DriveMounterService interface {
	MountDrive(context.Context, *MountDriveRequest) (*empty.Empty, error)
	UnmountDrive(context.Context, *UnmountDriveRequest) (*empty.Empty, error)
}

func RegisterDriveMounterService(srv *ttrpc.Server, svc DriveMounterService) {
	srv.RegisterService("DriveMounter", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"MountDrive": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req MountDriveRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.MountDrive(ctx, &req)
			},
			"UnmountDrive": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req UnmountDriveRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UnmountDrive(ctx, &req)
			},
		},
	})
}

type drivemounterClient struct {
	client *ttrpc.Client
}

func NewDriveMounterClient(client *ttrpc.Client) DriveMounterService {
	return &drivemounterClient{
		client: client,
	}
}

func (c *drivemounterClient) MountDrive(ctx context.Context, req *MountDriveRequest) (*empty.Empty, error) {
	var resp empty.Empty
	if err := c.client.Call(ctx, "DriveMounter", "MountDrive", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *drivemounterClient) UnmountDrive(ctx context.Context, req *UnmountDriveRequest) (*empty.Empty, error) {
	var resp empty.Empty
	if err := c.client.Call(ctx, "DriveMounter", "UnmountDrive", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
