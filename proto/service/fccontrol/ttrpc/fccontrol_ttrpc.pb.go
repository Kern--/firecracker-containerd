// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: fccontrol.proto
package fccontrol

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
	proto "github.com/firecracker-microvm/firecracker-containerd/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type FirecrackerService interface {
	CreateVM(context.Context, *proto.CreateVMRequest) (*proto.CreateVMResponse, error)
	PauseVM(context.Context, *proto.PauseVMRequest) (*emptypb.Empty, error)
	ResumeVM(context.Context, *proto.ResumeVMRequest) (*emptypb.Empty, error)
	StopVM(context.Context, *proto.StopVMRequest) (*emptypb.Empty, error)
	GetVMInfo(context.Context, *proto.GetVMInfoRequest) (*proto.GetVMInfoResponse, error)
	SetVMMetadata(context.Context, *proto.SetVMMetadataRequest) (*emptypb.Empty, error)
	UpdateVMMetadata(context.Context, *proto.UpdateVMMetadataRequest) (*emptypb.Empty, error)
	GetVMMetadata(context.Context, *proto.GetVMMetadataRequest) (*proto.GetVMMetadataResponse, error)
	GetBalloonConfig(context.Context, *proto.GetBalloonConfigRequest) (*proto.GetBalloonConfigResponse, error)
	UpdateBalloon(context.Context, *proto.UpdateBalloonRequest) (*emptypb.Empty, error)
	GetBalloonStats(context.Context, *proto.GetBalloonStatsRequest) (*proto.GetBalloonStatsResponse, error)
	UpdateBalloonStats(context.Context, *proto.UpdateBalloonStatsRequest) (*emptypb.Empty, error)
}

func RegisterFirecrackerService(srv *ttrpc.Server, svc FirecrackerService) {
	srv.RegisterService("Firecracker", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"CreateVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.CreateVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.CreateVM(ctx, &req)
			},
			"PauseVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.PauseVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.PauseVM(ctx, &req)
			},
			"ResumeVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.ResumeVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.ResumeVM(ctx, &req)
			},
			"StopVM": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.StopVMRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.StopVM(ctx, &req)
			},
			"GetVMInfo": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.GetVMInfoRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.GetVMInfo(ctx, &req)
			},
			"SetVMMetadata": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.SetVMMetadataRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.SetVMMetadata(ctx, &req)
			},
			"UpdateVMMetadata": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.UpdateVMMetadataRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UpdateVMMetadata(ctx, &req)
			},
			"GetVMMetadata": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.GetVMMetadataRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.GetVMMetadata(ctx, &req)
			},
			"GetBalloonConfig": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.GetBalloonConfigRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.GetBalloonConfig(ctx, &req)
			},
			"UpdateBalloon": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.UpdateBalloonRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UpdateBalloon(ctx, &req)
			},
			"GetBalloonStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.GetBalloonStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.GetBalloonStats(ctx, &req)
			},
			"UpdateBalloonStats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req proto.UpdateBalloonStatsRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.UpdateBalloonStats(ctx, &req)
			},
		},
	})
}

type firecrackerClient struct {
	client *ttrpc.Client
}

func NewFirecrackerClient(client *ttrpc.Client) FirecrackerService {
	return &firecrackerClient{
		client: client,
	}
}

func (c *firecrackerClient) CreateVM(ctx context.Context, req *proto.CreateVMRequest) (*proto.CreateVMResponse, error) {
	var resp proto.CreateVMResponse
	if err := c.client.Call(ctx, "Firecracker", "CreateVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) PauseVM(ctx context.Context, req *proto.PauseVMRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "PauseVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) ResumeVM(ctx context.Context, req *proto.ResumeVMRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "ResumeVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) StopVM(ctx context.Context, req *proto.StopVMRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "StopVM", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) GetVMInfo(ctx context.Context, req *proto.GetVMInfoRequest) (*proto.GetVMInfoResponse, error) {
	var resp proto.GetVMInfoResponse
	if err := c.client.Call(ctx, "Firecracker", "GetVMInfo", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) SetVMMetadata(ctx context.Context, req *proto.SetVMMetadataRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "SetVMMetadata", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) UpdateVMMetadata(ctx context.Context, req *proto.UpdateVMMetadataRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "UpdateVMMetadata", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) GetVMMetadata(ctx context.Context, req *proto.GetVMMetadataRequest) (*proto.GetVMMetadataResponse, error) {
	var resp proto.GetVMMetadataResponse
	if err := c.client.Call(ctx, "Firecracker", "GetVMMetadata", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) GetBalloonConfig(ctx context.Context, req *proto.GetBalloonConfigRequest) (*proto.GetBalloonConfigResponse, error) {
	var resp proto.GetBalloonConfigResponse
	if err := c.client.Call(ctx, "Firecracker", "GetBalloonConfig", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) UpdateBalloon(ctx context.Context, req *proto.UpdateBalloonRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "UpdateBalloon", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) GetBalloonStats(ctx context.Context, req *proto.GetBalloonStatsRequest) (*proto.GetBalloonStatsResponse, error) {
	var resp proto.GetBalloonStatsResponse
	if err := c.client.Call(ctx, "Firecracker", "GetBalloonStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *firecrackerClient) UpdateBalloonStats(ctx context.Context, req *proto.UpdateBalloonStatsRequest) (*emptypb.Empty, error) {
	var resp emptypb.Empty
	if err := c.client.Call(ctx, "Firecracker", "UpdateBalloonStats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
